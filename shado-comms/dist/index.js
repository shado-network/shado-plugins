import {v4}from'uuid';import c from'fastify';import p from'@fastify/cors';import {WebSocketServer}from'ws';var o=(r,t,e)=>{Object.keys(r).forEach(s=>{r[s].send(t,{binary:e});});};var i=class{static metadata={identifier:"shado-comms",description:"First party intra-communication utility.",key:"comms"};config={};http={server:void 0,config:{},secrets:{}};ws={server:void 0,config:{},secrets:{},connections:{}};_origin;_context;constructor(t,e,s){this._context=s,this._origin=e,this.http.config={...this.http.config,...t.http},this.http.secrets={...this.http.secrets};try{this.http.server=c({}),this.http.server?.register(p,{allowedHeaders:"*"});}catch{this._context.utils.logger.send({type:"ERROR",origin:{type:"PLUGIN",id:this._origin.id},data:{message:"Could not create Shad\u014D Comms http server"}});}this.ws.config={...this.ws.config,...t.ws},this.ws.secrets={...this.ws.secrets};try{this.ws.server=new WebSocketServer({port:this.ws.config.port}),this._context.utils.logger.send({type:"SUCCESS",origin:{type:"PLUGIN",id:this._origin.id},data:{message:`Started Shad\u014D Comms websocket server at port ${this.ws.config.port}`}});}catch{this._context.utils.logger.send({type:"ERROR",origin:{type:"PLUGIN",id:this._origin.id},data:{message:"Could not create Shad\u014D Comms websocket server"}});}this._initHttpServer(),this._initWebSocketServer();}_initHttpServer=async()=>{this._addHttpRoutes(),this._addWebSocketEvents();try{await this.http.server?.listen({port:this.http.config.port}),this._context.utils.logger.send({type:"SUCCESS",origin:{type:"PLUGIN",id:this._origin.id},data:{message:`Started Shad\u014D Comms http server at port ${this.http.config.port}`}});}catch{this._context.utils.logger.send({type:"ERROR",origin:{type:"PLUGIN",id:this._origin.id},data:{message:"Could not start Shad\u014D Comms http server"}});}};_defaultRouteError=t=>({status:"error",timestamp:Date.now(),data:{message:"Something went wrong",error:t}});_addHttpRoutes=()=>{this.http.server?.get("/",async(t,e)=>({})),this.http.server?.get("/ping",async(t,e)=>{try{return {status:"success",timestamp:Date.now(),data:{message:"PONG"}}}catch(s){return this._defaultRouteError(s)}}),this.http.server?.get("/puppet",async(t,e)=>{try{return {status:"success",timestamp:Date.now(),data:{message:`Puppet data for [ ${this._origin.id} / ${this._origin.name} ]`,puppet:{id:this._origin.id,name:this._origin.name,image:void 0,port:this.http.config.httPort}}}}catch(s){return this._defaultRouteError(s)}}),this.http.server?.get("/play",async(t,e)=>{try{return {status:"success",timestamp:Date.now(),data:{message:`Play data for [ ${this._origin.id} / ${this._origin.name} ]`,play:{id:this._origin.id,name:this._origin.name,image:void 0,port:this.http.config.httPort}}}}catch(s){return this._defaultRouteError(s)}});};_initWebSocketServer=async()=>{try{this.ws.server?.on("connection",t=>{let e=v4();this.ws.connections[e]=t;});}catch{}};_addWebSocketEvents=()=>{this._origin.events.on("planner",t=>{o(this.ws.connections,JSON.stringify(t),false);});}},l=i;export{l as default};
import v from'path';import I from'fs';import {fileURLToPath}from'url';var h=(a,t)=>{let e=[];a._register.clients.forEach(n=>{try{e.push(...Object.values(t[n.plugin.metadata.key]));}catch{}});return e};var E={"telegram-last-updated":0,"telegram-has-messages":false,"telegram-messages":[],"telegram-last-replied":0};var N={"twitter-last-updated":0,"twitter-has-logged-in":false,"twitter-last-log-in-attempt":0,"twitter-last-sent":0};var d={telegram:{...E},twitter:{...N}};var l=async(a,t)=>{for(let e=0;e<a.length;e++)await t(a[e],e,a);},R=async(a,t)=>Promise.all(a.map(t)).then(e=>a.filter((i,n)=>e[n]));var w=async(a,t)=>(await R(a,t)).length===a.length,u=async a=>new Promise(t=>setTimeout(t,a*1e3));var k=async(a,t,e)=>{let i=[],n=[],s=[];return t.memory.goals.forEach(r=>{r.evaluator({_origin:t,_context:e})?n.push(r):s.push(r);}),t.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetGoals",goals:{reached:n,unreached:s}}}),s.length===0||await l(s,async r=>{let o=a.filter(m=>!!m.effects[r.identifier]);if(o.length===0)return;let p=[];await l([o.at(0)],async m=>{let c=await P(true,m,[],a,t,e);c&&c!==null&&c.length>0&&p.push(c);}),i.push(...p);}),i},P=async(a,t,e,i,n,s)=>{if(!a||!t)return a=false,null;let r=[],o=[];return Object.keys(t.conditions).forEach(p=>{t.conditions[p]({_origin:{...n},_context:s})?r.push(p):o.push(p);}),o.length===0?(a=true,[t]):(o.forEach(async p=>{let m=i.filter(c=>{let _=c.effects[p]?.value({_origin:{...n},_context:s});return Object.keys(c.effects).includes(p)&&_});return m.length===0?(a=false,null):(e.push(m[0]),await P(a,m[0],e,i,n,s))}),a?(a=true,[t,...e].reverse()):(a=false,[]))};var S=async(a,t,e)=>(t.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetPlan",plan:a}}),await w(a,async n=>{if(e.utils.logger.send({type:"LOG",origin:{type:"PUPPET",id:t.id},data:{message:`Executing task "${n.identifier}"`}}),!Object.keys(n.conditions).every(r=>n.conditions[r]({_origin:t,_context:e})))return e.utils.logger.send({type:"WARNING",origin:{type:"PUPPET",id:t.id},data:{message:`Task "${n.identifier}" skipped`}}),false;let s=[];return await l(Object.keys(n.actions),async r=>{let o=await n.actions[r]({_origin:t,_context:e});s.push(o);}),s.every(r=>r.success)?(await l(Object.keys(n.effects),async r=>{await n.effects[r].trigger({_origin:t,_context:e});}),true):false}));var f={RETRY_PLANNING_IN_X_SECONDS:5},y=async(a,t,e)=>{let i=new Date;if(t.memory.state["last-updated"]=i.valueOf(),t.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetState",state:t.memory.state}}),!t.memory.goals||Object.keys(t.memory.goals).length===0){e.utils.logger.send({type:"LOG",origin:{type:"PUPPET",id:t.id},data:{message:"No goals have been set"}}),await u(f.RETRY_PLANNING_IN_X_SECONDS),y(a,t,e);return}let n=await k(a,t,e);if(!n||n.length===0){e.utils.logger.send({type:"LOG",origin:{type:"PUPPET",id:t.id},data:{message:"No plan found for current goals"}}),await u(f.RETRY_PLANNING_IN_X_SECONDS),y(a,t,e);return}let s=true;await l(n,async r=>{if(!r||r.length===0){e.utils.logger.send({type:"LOG",origin:{type:"PUPPET",id:t.id},data:{message:"No plan found for current goals"}}),await u(f.RETRY_PLANNING_IN_X_SECONDS),y(a,t,e);return}await S(r,t,e)||(s=false);}),s?e.utils.logger.send({type:"INFO",origin:{type:"PUPPET",id:t.id},data:{message:"All plans executed successfully"}}):(e.utils.logger.send({type:"WARNING",origin:{type:"PUPPET",id:t.id},data:{message:"Some plans skipped"}}),await u(f.RETRY_PLANNING_IN_X_SECONDS)),t.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetState",state:t.memory.state}}),y(a,t,e);};var T=async a=>{let t=[],e=I.readdirSync(a,{recursive:true});return await l(e,async i=>{if(!(!i.endsWith(".js")&&!i.endsWith(".ts")))try{let s=await import(v.join(a,i));t.push(s.default);}catch(n){console.log("Error loading task",n);}}),t};var H=a=>{let t=fileURLToPath(a),e=v.dirname(t);return {filename:t,dirname:e}};var g=class{static metadata={identifier:"shado-planner-htn",description:"Shad\u014D Network's hierarchical task network planner.",key:"planner"};config={showLogs:true};_tasks;_origin;_context;constructor(t,e,i){this._context=i,this._origin=e,this.config={...this.config,...t},this._tasks={};}_registerTasks=async()=>{let t={},e=v.join(H(import.meta.url).dirname,"tasks");return (await T(e)).forEach(n=>{if(!n)return;let s=n.identifier.split("-").at(0);t[s]||(t[s]={}),t[s][n.identifier]=n;}),t};setup=async()=>{try{this._origin.memory.goals=[...this._origin.memory.goals,...this.config.goals],this._origin.memory.state={"last-started":0,"last-updated":0,...this._origin.memory.state,"telegram-has-client":!!this._origin.clients?.telegram,...this._origin.clients?.telegram?d.telegram:{},"twitter-has-client":!!this._origin.clients?.twitter,...this._origin.clients?.twitter?d.twitter:{}},this._tasks=await this._registerTasks();}catch(t){this._context.utils.logger.send({type:"ERROR",origin:{type:"PUPPET",id:this._origin.id},data:{message:"Error in planner initialization",payload:{error:t}}});}};start=()=>{let t=new Date;this._origin.memory.state["last-started"]=t.valueOf(),this._origin.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetState",state:this._origin.memory.state}}),y(h(this._origin,this._tasks),this._origin,this._context);}},mt=g;export{mt as default};
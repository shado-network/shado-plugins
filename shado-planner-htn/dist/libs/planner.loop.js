var y=async(t,e)=>{for(let a=0;a<t.length;a++)await e(t[a],a,t);},S=async(t,e)=>Promise.all(t.map(e)).then(a=>t.filter((o,n)=>a[n]));var m=async(t,e)=>(await S(t,e)).length===t.length,c=async t=>new Promise(e=>setTimeout(e,t*1e3));var N=async(t,e,a)=>{let o=[],n=[],r=[];return e.memory.goals.forEach(s=>{s.evaluator({_origin:e,_context:a})?n.push(s):r.push(s);}),e.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetGoals",goals:{reached:n,unreached:r}}}),r.length===0||await y(r,async s=>{let l=t.filter(p=>!!p.effects[s.identifier]);if(l.length===0)return;let i=[];await y([l.at(0)],async p=>{let u=await E(true,p,[],t,e,a);u&&u!==null&&u.length>0&&i.push(u);}),o.push(...i);}),o},E=async(t,e,a,o,n,r)=>{if(!t||!e)return t=false,null;let s=[],l=[];return Object.keys(e.conditions).forEach(i=>{e.conditions[i]({_origin:{...n},_context:r})?s.push(i):l.push(i);}),l.length===0?(t=true,[e]):(l.forEach(async i=>{let p=o.filter(u=>{let g=u.effects[i]?.value({_origin:{...n},_context:r});return Object.keys(u.effects).includes(i)&&g});return p.length===0?(t=false,null):(a.push(p[0]),await E(t,p[0],a,o,n,r))}),t?(t=true,[e,...a].reverse()):(t=false,[]))};var h=async(t,e,a)=>(e.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetPlan",plan:t}}),await m(t,async n=>{if(a.utils.logger.send({type:"LOG",origin:{type:"PUPPET",id:e.id},data:{message:`Executing task "${n.identifier}"`}}),!Object.keys(n.conditions).every(s=>n.conditions[s]({_origin:e,_context:a})))return a.utils.logger.send({type:"WARNING",origin:{type:"PUPPET",id:e.id},data:{message:`Task "${n.identifier}" skipped`}}),false;let r=[];return await y(Object.keys(n.actions),async s=>{let l=await n.actions[s]({_origin:e,_context:a});r.push(l);}),r.every(s=>s.success)?(await y(Object.keys(n.effects),async s=>{await n.effects[s].trigger({_origin:e,_context:a});}),true):false}));var f={RETRY_PLANNING_IN_X_SECONDS:5},d=async(t,e,a)=>{let o=new Date;if(e.memory.state["last-updated"]=o.valueOf(),e.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetState",state:e.memory.state}}),!e.memory.goals||Object.keys(e.memory.goals).length===0){a.utils.logger.send({type:"LOG",origin:{type:"PUPPET",id:e.id},data:{message:"No goals have been set"}}),await c(f.RETRY_PLANNING_IN_X_SECONDS),d(t,e,a);return}let n=await N(t,e,a);if(!n||n.length===0){a.utils.logger.send({type:"LOG",origin:{type:"PUPPET",id:e.id},data:{message:"No plan found for current goals"}}),await c(f.RETRY_PLANNING_IN_X_SECONDS),d(t,e,a);return}let r=true;await y(n,async s=>{if(!s||s.length===0){a.utils.logger.send({type:"LOG",origin:{type:"PUPPET",id:e.id},data:{message:"No plan found for current goals"}}),await c(f.RETRY_PLANNING_IN_X_SECONDS),d(t,e,a);return}await h(s,e,a)||(r=false);}),r?a.utils.logger.send({type:"INFO",origin:{type:"PUPPET",id:e.id},data:{message:"All plans executed successfully"}}):(a.utils.logger.send({type:"WARNING",origin:{type:"PUPPET",id:e.id},data:{message:"Some plans skipped"}}),await c(f.RETRY_PLANNING_IN_X_SECONDS)),e.events.emit("planner",{timestamp:Date.now(),origin:"shado-planner-htn",data:{identifier:"puppetState",state:e.memory.state}}),d(t,e,a);};export{d as plannerLoop};